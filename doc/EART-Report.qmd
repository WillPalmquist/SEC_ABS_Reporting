---
title: "Exeter Automobile Receivables Trust"
subtitle: "Case Study"
author: "Will Palmquist"
date: "2024-06-16"
date-format: short
format: 
  pdf:
   fig-width: 10
   fig-height: 20
   documentclass: report
editor: visual
pdf-engine: pdflatex
header-includes:
   \usepackage{float}
   \floatplacement{table}{H}
---

```{r global_options, include = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE,fig.width = 10,fig.height = 7)
```

```{r, echo = FALSE}
library(gt)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(forecast)

pal <- RColorBrewer::brewer.pal(9,"Blues")[4:9]
```

{{< pagebreak >}}

## [ABS-EE Filing Data]{.underline}

The Exeter Automobile Receivables Trust 2022-6 is an asset backed security comprised of subprime auto loans. The monthly loan level reporting data has the following characteristics:

-   31,635 auto loans

-   19 months of data from 2022-10-01 to present

### Accessing the Data

To access, download, and aggregate the monthly asset data files, see `01-SEC-Scraping.R` in the associated github repo found [here](https://github.com/WillPalmquist/SEC_ABS_Reporting).

### Analysis

All associated scripts, quarto documents, and data files can also be found in the linked repository.

```{r, echo = FALSE}
# Prep Datasets
#| echo: false
abs_ee_data <- readRDS("../data/abs_ee_data_all.rds")

abs_ee_data_clean <- abs_ee_data |>
  dplyr::mutate(
    dplyr::across(c(reportingPeriodBeginningDate,reportingPeriodEndingDate,interestPaidThroughDate),
                  ~ as.Date(.x, format = "%m-%d-%Y")),
    dplyr::across(c(contains("amount"), contains("percentage"), remainingTermToMaturityNumber, obligorCreditScore),
                  ~ as.numeric(.x))
  ) |> 
  dplyr::group_by(assetNumber) |> 
  dplyr::mutate(
    prepaidFlag = ifelse(zeroBalanceCode == 1 & remainingTermToMaturityNumber > 1, 1,0), 
    prepaidFlagFirst = ifelse(zeroBalanceCode == 1 & dplyr::lead(is.na(zeroBalanceCode) & remainingTermToMaturityNumber >1), 1,0)) |> 
  dplyr::ungroup()

# Time Series Data
abs_ts_sums <- abs_ee_data_clean |> 
  dplyr::group_by(reportingPeriodEndingDate) |> 
  dplyr::summarise(
    dplyr::across(c(contains("amount"), contains("percentage"), remainingTermToMaturityNumber, obligorCreditScore),
                  ~ sum(.x, na.rm = T)),
    numberActiveLoans = sum(remainingTermToMaturityNumber > 0 & is.na(zeroBalanceCode), na.rm = T),
    numberNewPrepaidLoans = sum(prepaidFlagFirst,na.rm = T),
    numberPrepaidLoansTotal = sum(prepaidFlag, na.rm = T),
    defaults = sum(zeroBalanceCode == 4, na.rm = T),
    prepayments = sum(zeroBalanceCode == 1, na.rm = T)
  ) |> 
  dplyr::ungroup()
## Asset Level Grouping
abs_ee_data_asset_group <- abs_ee_data_clean |> 
  dplyr::group_by(assetNumber) |> 
  dplyr::summarise(
    creditScore = dplyr::first(obligorCreditScore),
    employmentVerification = dplyr::first(obligorEmploymentVerificationCode),
    incomeVerification = dplyr::first(obligorIncomeVerificationLevelCode),
    totalChargeOffPrincipal = sum(chargedoffPrincipalAmount, na.rm = T),
    prepaid = sum(prepaidFlag, na.rm = T),
    paymentToIncome = first(paymentToIncomePercentage),
    zeroBalanceCode = max(zeroBalanceCode, na.rm = T)
  )
```

{{< pagebreak >}}

## [A. Exploratory Analysis]{.underline}

This section of the report seeks to identify relevant trends and features of the dataset to better understand asset-backed securities.

#### Obligor Credit Scores

The following plots identify relevant characteristics of the underlying loan pool in terms of credit scores.

In the first figure, the distribution of credit scores and associated income verification statuses, reinforce the "subprime" label and the associated risk of this security. With relatively low credit and a small number of verified income statuses (3 and above), the borrowers in this asset likely pose a higher risk of default.

```{r, echo = FALSE}

# Create bins for credit scores
bins <- seq(400, 900,by=25)

# Bin the data and calculate average charged-off principal for each bin
credit_score_binned_data <- abs_ee_data_asset_group |> 
  dplyr::filter(creditScore > 0)  |> 
  dplyr::mutate(
    creditScoreBin = cut(creditScore, breaks = bins, include.lowest = FALSE),
    incomeVerification = dplyr::case_when(
      incomeVerification == 2 ~ "Stated, Not Verified",
      incomeVerification == 3 ~ "Stated, Verified",
      incomeVerification == 4 ~ "Stated, Level-4 Verified"
    )) |>
  dplyr::filter(!is.na(creditScoreBin)) |> 
  dplyr::group_by(creditScoreBin, incomeVerification) |>
  dplyr::summarise(
    n = n(),
    TotalChargeOffPrincipal = mean(totalChargeOffPrincipal, na.rm = TRUE))
credit_score_binned_data2 <- abs_ee_data_asset_group |> 
  dplyr::filter(creditScore > 0)  |> 
  dplyr::mutate(creditScoreBin = cut(creditScore, breaks = bins, include.lowest = FALSE)) |>
  dplyr::filter(!is.na(creditScoreBin)) |> 
  dplyr::group_by(creditScoreBin) |>
  dplyr::summarise(
    n = n(),
    TotalChargeOffPrincipal = mean(totalChargeOffPrincipal, na.rm = TRUE))

# Plot the results
ggplot2::ggplot(credit_score_binned_data, ggplot2::aes(x = creditScoreBin, y = n, fill = incomeVerification)) +
  ggplot2::geom_col(stat = "identity",position = "stack") +
  scale_fill_brewer(palette = "Set1")+
  ggplot2::labs(
    title = "Number of Loans by Credit Score Bin",
    x = "Credit Score Bin",
    y = "Number of Loans"
  ) +
    ggplot2::scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 3)]) +  # Adjust 'by' value to show every nth label
  ggplot2::theme_minimal() +
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 14),

  )


```

{{< pagebreak >}}

Next, I analyzed the difference in the average charged-off principal by asset since inception. I was expecting individuals with lower credit scores to have a significantly higher average value than those with higher scores. While individuals with a credit score greater than 750 are significantly lower (aside from an outlier in the final bin), there is no clear relationship between credit score and the average charged-off amount on the loan. This demonstrates the need to analyze obligor risk beyond simple metrics like credit score.

```{r, echo = FALSE}
# Plot the results
ggplot2::ggplot(credit_score_binned_data2, ggplot2::aes(x = creditScoreBin, y = TotalChargeOffPrincipal, fill = TotalChargeOffPrincipal)) +
  ggplot2::geom_col() +
  scale_fill_continuous()+
  ggplot2::labs(
    title = "Average Charged-Off Principal by Credit Score Bin",
    x = "Credit Score Bin",
    y = "Average Charged-Off Principal"
  ) +
  ggplot2::scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 3)]) +  # Adjust 'by' value to show every nth label
  ggplot2::theme_minimal()+
  theme(
        plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),     
    legend.title = element_text(size = 14),
    legend.position = "none" 

  )


```

{{< pagebreak >}}

#### Payment Patterns

The following plot highlights the differences in actual and scheduled principal payments by remaining term to maturity. The tendency of individuals to cover their scheduled payments early in the term reflects a determination to pay down the overall principal and avoid heightened interest payments. This pattern continues for some time but eventually turns as the loans near maturity (around 20 remaining months). This could be a result of overpaying earlier in the term or individuals falling behind on payments. Then, in the final months of the loan term, individuals fulfill their financial obligations and pay outstanding principal amounts. Understanding the tendency of individuals to over/under pay in terms of the remaining time to maturity gives us a better idea of borrower payment behavior in the underlying loan pool.

```{r, echo = FALSE, fig.height = 9}
abs_ts_payments <- abs_ee_data_clean |>
  group_by(remainingTermToMaturity = as.numeric(remainingTermToMaturityNumber)) |>
  summarise(
    actualPrincipalCollectedAmount = mean(actualPrincipalCollectedAmount, na.rm = T),
    scheduledPrincipalAmount = mean(scheduledPrincipalAmount, na.rm = T)
  ) |> 
  dplyr::mutate(
    Diff = actualPrincipalCollectedAmount - scheduledPrincipalAmount,
    `Under/Over Payment` = ifelse(Diff < 0, "Underpaid","Overpaid"))

ggplot(abs_ts_payments) +
  geom_line(aes(x = remainingTermToMaturity, y = scheduledPrincipalAmount, colour = "Scheduled Principal Amount"),linetype = "dotted", size = 1) +
  geom_line(aes(x = remainingTermToMaturity, y = actualPrincipalCollectedAmount, colour = "Actual Principal Collected Amount"), size = 1) +
  geom_col(aes(x = remainingTermToMaturity, y = Diff, fill = `Under/Over Payment`), alpha = 0.5) +
  scale_x_reverse() +
  scale_colour_manual(name = "Payment Type", values = c("Scheduled Principal Amount" = "red", "Actual Principal Collected Amount" = "blue")) +
  scale_fill_manual(name = "Difference", values = c("Underpaid" = "darkred", "Overpaid" = "darkgreen")) +
  labs(title = "Actual vs. Scheduled Payments (Avg.) - Remaining Term to Maturity",
       x = "Remaining Term to Maturity (Months)",
       y = "Average Payment Amount") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 14),
    legend.position = "bottom" 
  ) +
  guides(
    color = guide_legend(ncol = 1),
    fill = guide_legend(ncol = 1)
  )

```

{{< pagebreak >}}

#### Total Outstanding Loan Balance

At the highest level, I wanted to understand the total loan amount and how this value is paid down over time. The figure below shows a time series of the overall loan amount and the total balance remaining aggregated at the monthly level. In terms of time to maturity, the ABS is still early in its overall life. After the first few months in which individual loans accumulate, there is a stable decline in overall principal amount as borrowers make payments against their loan balance.

```{r, echo = FALSE}
df_overall_loan_balance <- abs_ts_sums |> 
  dplyr::select(reportingPeriodEndingDate, chargedoffPrincipalAmount, reportingPeriodActualEndBalanceAmount, originalLoanAmount)

ggplot(df_overall_loan_balance) +
  geom_point(aes(x = reportingPeriodEndingDate, y = originalLoanAmount, colour = "Total Original Loan Amount"), size = 2) +
  geom_point(aes(x = reportingPeriodEndingDate, y = reportingPeriodActualEndBalanceAmount, colour = "Total Outstanding Balance"), size = 2) +
  geom_area(aes(x = reportingPeriodEndingDate, y = originalLoanAmount, colour = "Total Original Loan Amount", fill = "Total Original Loan Amount"), alpha = 0.4,size = 1) +
  geom_area(aes(x = reportingPeriodEndingDate, y = reportingPeriodActualEndBalanceAmount, colour = "Total Outstanding Balance", fill = "Total Outstanding Balance"), alpha = 0.4, size = 1) +
  scale_colour_manual(name = "Line Legend", values = c("Total Original Loan Amount" = "lightblue", "Total Outstanding Balance" = "blue")) +
  scale_fill_manual(name = "Line Legend", values = c("Total Original Loan Amount" = "lightblue", "Total Outstanding Balance" = "blue")) +
    ggplot2::scale_y_continuous(labels = scales::label_number(prefix = "$",  scale = 1e-3, big.mark = ",")) +
    ggplot2::labs(
    title = "ABS Original Loan Amounts vs. Remaining Principal",
    x = "Reporting Period End Date",
    y = "Total Amount (Thousands)"
  ) +
  theme_minimal()+
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 14),
    legend.position = "bottom" 
  ) 



```

{{< pagebreak >}}

#### Principal, Interest, and Charge-Offs Over Time

With the above trend in mind, I wanted to understand how principal and interest payments as well as the total charged-off principal change over time. The figure below shows the monthly totals for each respective metric. Interest and principal, as expected, change in a similar fashion and mirror the pattern of the overall remaining loan balance. However, charged-off principal varies in its rate of change after the original accumulation of assets.

```{r, echo = FALSE, fig.height=12,fig.width= 10}
abs_ts_sums_long <- abs_ts_sums |> 
  dplyr::select(reportingPeriodEndingDate, actualPrincipalCollectedAmount,actualInterestCollectedAmount,chargedoffPrincipalAmount) |> 
  tidyr::pivot_longer(cols = -reportingPeriodEndingDate)

ggplot2::ggplot(abs_ts_sums_long, ggplot2::aes(reportingPeriodEndingDate,value)) +
  ggplot2::geom_line() +
  ggplot2::scale_y_continuous(labels = scales::label_number(prefix = "$",  scale = 1e-3, big.mark = ",")) +
  ggplot2::geom_smooth(size = .5,alpha = .5, ) +
  ggplot2::facet_wrap(~ name, ncol = 1) +
  ggplot2::labs(
    title = "Interest, Principal, and Charge-Off by Month",
    x = "Reporting Period End Date",
    y = "Total Amount (Thousands)"
  ) +
  ggplot2::scale_x_date(date_breaks = "3 months") +
  ggplot2::theme_minimal()+
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 14),
    legend.position = "bottom" 
  )


```

{{< pagebreak >}}

#### Loan Composition 

In this section, I sought to understand the composition of the asset pool in more detail. The first step in this process was to identify how this composition changes over time in terms of loan status. The zero balance code in the dataset can tell us whether a particular asset has matured, defaulted, or been sold during a particular time period. The figure below shows each status as a percentage of the total asset pool allowing us to monitor the health of the security over time. The growth of charged-off and prepaid/matured assets remains steady over time, allowing us to more easily forecast this composition going forward.

```{r, echo = FALSE}
# ZeroBalance Breakdown 
abs_ts_zero_balance <- abs_ee_data_clean |> 
  dplyr::group_by(reportingPeriodEndingDate, zeroBalanceCode) |> 
  dplyr::summarise(
    n = n()
  ) |> 
  dplyr::mutate(
    zeroBalanceCode = dplyr::case_match(
      as.numeric(zeroBalanceCode),
      1 ~ "Prepaid or Matured",
      2 ~ "Third-Party Sale",
      3 ~ "Repurchased or Replaced",
      4 ~ "Charged-Off",
      NA ~ "Active")
    )

abs_ts_zero_balance |> 
  ggplot2::ggplot(ggplot2::aes(x = reportingPeriodEndingDate, y = n, fill = zeroBalanceCode)) +
  ggplot2::geom_bar(stat = "identity",position = "fill") +
  ggplot2::scale_fill_brewer(palette = "Set1") +
  ggplot2::labs(
    title = "ABS Loan Status Composition Since Inception",
    x = "Reporting Period End Date",
    y = "Share of Total"
  ) +
  ggplot2::scale_x_date(date_breaks = "4 months") +
  ggplot2::theme_minimal()+
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 10),
    legend.title = element_text(size = 12),
    legend.position = "bottom"
  ) 



```

{{< pagebreak >}}

## [B. Forecasting: Charged-Off Principal]{.underline}

After familiarizing myself with the asset pool, its composition, and how the relevant account balances change over time, I was far better equipped to forecast charged-off principal for the 36th month of the deal.

Prior to forecasting, I found the cumulative amount of charged-off principal over the life of the transaction:

```{r, echo = FALSE}
abs_ts_forecasting <- abs_ee_data_clean |> 
  dplyr::group_by(reportingPeriodEndingDate) |> 
  dplyr::summarise(
    dplyr::across(c(contains("amount"), contains("percentage"), remainingTermToMaturityNumber, obligorCreditScore),
                  ~ sum(.x, na.rm = T)),
    numberActiveLoans = sum(remainingTermToMaturityNumber > 0 & is.na(zeroBalanceCode), na.rm = T),
    numberNewPrepaidLoans = sum(prepaidFlagFirst,na.rm = T),
    numberPrepaidLoansTotal = sum(prepaidFlag, na.rm = T),
    defaults = sum(zeroBalanceCode == 4, na.rm = T),
    prepayments = sum(zeroBalanceCode == 1, na.rm = T)
  ) |> 
  dplyr::ungroup()

```

```{r, result = 'asis', echo = FALSE}
# cumulative charged off principal
cum_charged_off_principal <- format(sum(as.numeric(abs_ee_data$chargedoffPrincipalAmount), na.rm = T), big.mark = ",")
cat(paste0("Cumulative Value as of 04/30/2024: $",cum_charged_off_principal))
```

{{< pagebreak >}}

### Method 1 - Traditional Forecasting Models (ARIMA, ETS)

At first, I used traditional statistical forecasting methods to predict the charged-off principal balance in month 36. Using two simple approaches, ARIMA and ETS, the following forecasts were produced.

```{r, echo = FALSE}

#### Forecasting
charged_off_principal_ts <- abs_ts_forecasting |> 
  dplyr::select(reportingPeriodEndingDate,chargedoffPrincipalAmount,numberActiveLoans,numberNewPrepaidLoans,numberPrepaidLoansTotal) |> 
  dplyr::mutate(
    chargedoffPrincipalAmountCumulative = cumsum(chargedoffPrincipalAmount)
  )

### Model Fitting
ts_data <- ts(charged_off_principal_ts$chargedoffPrincipalAmountCumulative)

# ARIMA
fit_arima <- auto.arima(ts_data)
forecast_arima <- forecast(fit_arima, h = 17)
autoplot(forecast_arima) + ggtitle("ARIMA Forecast of Cumulative Charged-Off Principal") +
    ggplot2::scale_y_continuous(labels = scales::label_number(prefix = "$",  scale = 1e-3, big.mark = ",")) +
    ggplot2::scale_x_continuous(breaks = seq(0,36, by = 6))+
    ggplot2::labs(
    x = "Time Period (Month)",
    y = "Cumulative Charged-Off Principal"
  ) +
  theme_minimal()+
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),    
    legend.title = element_text(size = 14),
    legend.position = "bottom" 

  )



# checkresiduals(fit_arima)
# ETS
fit_ets <- ets(ts_data)
forecast_ets <- forecast(fit_ets, h = 17)
autoplot(forecast_ets) + ggtitle("ETS Forecast of Cumulative Charged-Off Principal") +
    ggplot2::scale_y_continuous(labels = scales::label_number(prefix = "$",  scale = 1e-3, big.mark = ","))  +
    ggplot2::scale_x_continuous(breaks = seq(0,36, by = 6))+
    ggplot2::labs(
    x = "Time Period (Month)",
    y = "Cumulative Charged-Off Principal"
  ) +
  theme_minimal()+
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),    
    legend.title = element_text(size = 14),
    legend.position = "bottom" 
  )


# checkresiduals(fit_ets)

#Comparison
errors_arima <- tsCV(ts_data, forecastfunction = function(x, h) forecast(auto.arima(x), h = h), h = 17)
mae_arima <- mean(abs(errors_arima), na.rm = TRUE)
mse_arima <- mean(errors_arima^2, na.rm = TRUE)

# Cross-validation for ETS
errors_ets <- tsCV(ts_data, forecastfunction = function(x, h) forecast(ets(x), h = h), h = 17)
mae_ets <- mean(abs(errors_ets), na.rm = TRUE)
mse_ets <- mean(errors_ets^2, na.rm = TRUE)

# Compare MAE and MSE
# data.frame(
#   Model = c("ARIMA", "ETS"),
#   MAE = c(mae_arima, mae_ets),
#   MSE = c(mse_arima, mse_ets)
# )

```

The simplicity of the models produce less than ideal results that fail to account for the aforementioned rates of change (total outstanding principal, monthly principal payments, etc.). Taking a step back, I elected to predict charge-offs using more traditional methods of financial forecasting.

{{< pagebreak >}}

### Method 2 - Past 12M Averages

The following approach uses the historical rate of change of the outstanding loan balance in the transaction and the monthly total charge-offs as a percentage of this value. By taking the average of each over the past 12 months, I arrived at the following:

```{r, result = 'asis', echo = FALSE}
df_chargeoffs <- abs_ts_forecasting |> 
  dplyr::select(reportingPeriodEndingDate, chargedoffPrincipalAmount, reportingPeriodActualEndBalanceAmount) |> 
  dplyr::mutate(
    chargeOffPercentOfBalance = chargedoffPrincipalAmount/reportingPeriodActualEndBalanceAmount,
    EndBalanceAmountYOY = (reportingPeriodActualEndBalanceAmount/lag(reportingPeriodActualEndBalanceAmount))-1,
    Period = "Actual"
    )

stableBalanceGrowthRate = mean(df_chargeoffs |> tail(12) |> dplyr::pull(EndBalanceAmountYOY),na.rm =T)
stableChargeOffPercent = mean(df_chargeoffs |> tail(12) |> dplyr::pull(chargeOffPercentOfBalance),na.rm =T)

# cumulative charged off principal

cat(paste0("Average Change in Outstanding Balance Amount (P12M): ",round(stableBalanceGrowthRate*100,2), "% \n"))
cat(paste0("Charge-Offs as a % of Outstanding Balance Amount (P12M): ",round(stableChargeOffPercent*100,2), "%"))
```

By accounting for the gradual decrease in the total outstanding loan balance and holding charge-offs at a steady 1.74%, we arrive at a more intuitive forecast. The two plots below show the effects of these two assumptions in the forecast period.

```{r, echo = FALSE}
last_balance <- df_chargeoffs |> pull(reportingPeriodActualEndBalanceAmount) |> tail(1)

df_forecast <- data.frame(
  reportingPeriodEndingDate = seq.Date(from = max(df_chargeoffs$reportingPeriodEndingDate) + 30, by = "month",length.out = 17),
  reportingPeriodActualEndBalanceAmount = last_balance *cumprod(rep(1+stableBalanceGrowthRate,17))
) |> 
  dplyr::mutate(
    chargedoffPrincipalAmount = reportingPeriodActualEndBalanceAmount * stableChargeOffPercent,
    Period = "Forecast"
  )

combined_forecast <- df_chargeoffs |> 
  dplyr::bind_rows(df_forecast) |> 
  dplyr::mutate(
    cumulativeSumChargeOffs = cumsum(chargedoffPrincipalAmount)
  )

CumulativeChargeOffsMonth19 <- sum(combined_forecast$chargedoffPrincipalAmount[combined_forecast$Period == "Actual"], na.rm = T)
CumulativeChargeOffsMonth36 <- sum(combined_forecast$chargedoffPrincipalAmount, na.rm = T)

ggplot2::ggplot(combined_forecast) +
  ggplot2::geom_line(ggplot2::aes(x = reportingPeriodEndingDate, y = chargedoffPrincipalAmount, color = Period), size = 1) +
  ggplot2::theme_minimal() + 
    ggplot2::labs(
    title = "Forecast: Monthly Charged-Off Principal",
    x = "Month",
    y = "Total Amount (Thousands)"
) +
  ggplot2::scale_y_continuous(labels = scales::label_number(prefix = "$",  scale = 1e-3, big.mark = ",")) +
    ggplot2::scale_x_date(date_breaks = "6 months") +
  scale_colour_manual(name = "Line Legend", values = c("Actual" = "black", "Forecast" = "blue")) +
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),    
    legend.title = element_text(size = 14),
    legend.position = "bottom" 

  )



ggplot2::ggplot(combined_forecast) +
  ggplot2::geom_line(ggplot2::aes(x = reportingPeriodEndingDate, y = reportingPeriodActualEndBalanceAmount, color = Period), size = 1) +
  ggplot2::theme_minimal() +
    ggplot2::labs(
    title = "Forecast: Monthly Loan Balance",
    x = "Month",
    y = "Total Amount (Thousands)"
  ) +
      ggplot2::scale_y_continuous(labels = scales::label_number(prefix = "$",  scale = 1e-3, big.mark = ",")) +
    ggplot2::scale_x_date(date_breaks = "6 months") +
  ggplot2::scale_colour_manual(name = "Line Legend", values = c("Actual" = "black", "Forecast" = "blue")) +
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),  
    legend.title = element_text(size = 14),    
    legend.position = "bottom" 

  )


```

{{< pagebreak >}}

With projections for both components based on historical trends, we can forecast the cumulative charged-off principal for month 36. The forecast now reflects the fact that the increase in cumulative amount starts to slow as borrowers continue to make payments and total loan balance decreases.

```{r, echo = FALSE, result = 'asis'}
CumulativeChargeOffsMonth36 <- format(sum(combined_forecast$chargedoffPrincipalAmount, na.rm = T), big.mark = ",")
cat(paste0("Cumulative Value 09/30/2025: $",CumulativeChargeOffsMonth36))
```

```{r, echo = FALSE}
ggplot(combined_forecast) +
  ggplot2::geom_line(ggplot2::aes(x = reportingPeriodEndingDate, y = cumulativeSumChargeOffs, color = Period), size = 1) +
  ggplot2::theme_minimal() +
    ggplot2::labs(
    title = "Forecast: Cumulative Charged-Off Principal Amount",
    x = "Month",
    y = "Total Amount (Thousands)"
  ) + 
      ggplot2::scale_y_continuous(labels = scales::label_number(prefix = "$",  scale = 1e-3, big.mark = ",")) +
  scale_colour_manual(name = "Line Legend", values = c("Actual" = "black", "Forecast" = "blue")) +
  theme(
    plot.title = element_text(size = 18),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.text = element_text(size = 14),     
    legend.title = element_text(size = 14),
    legend.position = "bottom" 

  )




```

{{< pagebreak >}}

## [C. Kelley Blue Book Values]{.underline}

### Vehicle Value Sources

For the final part of the case, it was important to understand the sources of vehicle value in the dataset. The number of loans for each value source are shown below.

```{r, echo = FALSE}
vehicles_value_code <- abs_ee_data_clean |>
  dplyr::filter(reportingPeriodEndingDate == "2024-04-30") |>
  dplyr::mutate(
    vehicleValueSourceCode = dplyr::case_match(
      as.numeric(vehicleValueSourceCode),
      1 ~ "Invoice Price",
      2 ~ "MSRP",
      3 ~ "Kelley Blue Book",
      98 ~ "Other",
      NA ~ "Other")
  ) |> 
  dplyr::group_by(vehicleValueSourceCode) |>
  dplyr::summarise(
    Records = format(dplyr::n(),big.mark = ",")
  ) 
vehicles_value_code |> gt::gt()
```

### Top 10 Standard Deviations

For those vehicles where the Kelley Blue Book Value is used as the source of value, the Dodge Charger has the highest standard deviation.

```{r, echo = FALSE}
# April 2024 KBB Values
vehicle_kbb_std <- abs_ee_data_clean |>
  dplyr::filter(reportingPeriodEndingDate == "2024-04-30", vehicleValueSourceCode == 3) |>
  dplyr::group_by(vehicleManufacturerName,vehicleModelName) |>
  dplyr::summarise(
    records = dplyr::n(),
    stdev = sd(vehicleValueAmount, na.rm = T)
  ) |>
  dplyr::filter(records > 30)

# April 2024 Max Stdev
top10_stdev_vehicle_value <- vehicle_kbb_std |>
  dplyr::ungroup() |>
  dplyr::slice_max(order_by = stdev,n = 10)

top10_stdev_vehicle_value |> 
  dplyr::mutate(vehicleMakeModel = paste0(vehicleManufacturerName," ",vehicleModelName)) |> 
  ggplot2::ggplot(aes(x = reorder(vehicleMakeModel,-stdev), y = stdev, fill = stdev)) +
  ggplot2::geom_col() +
  ggplot2::theme_minimal() +
  ggplot2::theme(
    plot.title = element_text(size = 18),
    legend.position = "none",
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(angle = 45, hjust=1, size = 14),
    axis.text.y = element_text(size = 14)
)+
  ggplot2::labs(
    title = "Kelley Blue Book - Standard Deviations",
    x = "Vehicle Make/Model",
    y = "Standard Deviation"
  ) 


```
